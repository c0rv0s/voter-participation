{"version":3,"sources":["Components/Detail.tsx","Components/Proposal.tsx","Components/Timeline.tsx","daos.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Detail","proposal","proposer","votes","length","map","voter","i","key","Proposal","totalVotes","parseInt","votesFor","votesAgainst","useState","viewDetail","setViewDetail","className","title","style","paddingLeft","color","winningOutcome","toUpperCase","timeStamp","a","Date","year","getFullYear","month","getMonth","date","getDate","getHours","getMinutes","createdAt","cursor","onClick","backgroundColor","width","Math","round","DAO_QUERY","gql","Timeline","daoAddress","useQuery","variables","loading","error","data","console","log","proposals","daos","client","ApolloClient","uri","process","cache","InMemoryCache","App","setDaoAddress","value","onChange","e","target","dao","id","name","float","marginLeft","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.511d1a65.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst Detail: React.FC<{proposal: any}> = ({proposal}) => {\n\n  return (\n    <div>\n      <hr/>\n      Proposer:\n      <br/>\n      <p>{proposal.proposer}</p>\n      <br/>\n      Number of Voters: {proposal.votes.length}\n      {\n        proposal.votes.map((voter: any, i: number) => \n          <div key={i}>\n            <p >{voter.voter}</p>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nexport default Detail;","import React, {useState} from 'react';\nimport '../Styles/Proposal.css'\nimport Detail from './Detail'\n\nconst Proposal: React.FC<{proposal: any}> = ({proposal}) => {\n  const totalVotes = parseInt(proposal.votesFor) + parseInt(proposal.votesAgainst)\n  const [viewDetail, setViewDetail] = useState(false)\n\n  const date = (timeStamp: number) => {\n    var a = new Date(timeStamp * 1000)\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    var year = a.getFullYear()\n    var month = months[a.getMonth()]\n    var date = a.getDate()\n    var hour = a.getHours()\n    var min = a.getMinutes()\n    var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min\n    return time;\n  }\n\n  return (\n    <span className=\"proposal\">\n      <div className=\"container circle left\" >\n        <div className=\"content\" >\n          <h4>\n            {proposal.title}:\n            <span style={{\n              paddingLeft: '6px',\n              color: proposal.winningOutcome==='Pass'?\"green\": \"red\"\n            }}>\n            {proposal.winningOutcome.toUpperCase()}</span>\n          </h4>\n          <p>{date(proposal.createdAt)}</p>\n          {\n            viewDetail && <Detail proposal={proposal}/>\n          }\n          <p style={{color: \"grey\", cursor: \"pointer\"}} onClick={() => setViewDetail(!viewDetail)}>\n            {viewDetail?\"Close\": \"Expand\"}\n          </p>\n        </div>\n      </div>\n      <div className=\"container right\">\n        {parseInt(proposal.votesFor)>0 && <div \n          className=\"bar\" \n          style={{\n            backgroundColor: 'green', \n            width: `${Math.round(100 * parseInt(proposal.votesFor) / totalVotes)}%`}} \n        />}\n        {parseInt(proposal.votesAgainst)>0 && <div \n          className=\"bar\" \n          style={{\n            backgroundColor: 'red', \n            width: `${Math.round(100 * parseInt(proposal.votesAgainst) / totalVotes)}%`}} \n        />}\n        {\n          parseInt(proposal.votesAgainst)===0 && parseInt(proposal.votesFor)===0 &&<div \n          className=\"bar\" \n          style={{\n            backgroundColor: 'grey', \n            width: `100%`}} \n        />\n        }\n        <br/><br/>\n        <div className=\"legend\">\n          <span className=\"label\" style={{color: \"green\"}}>For: {proposal.votesFor}</span>\n        </div>\n        <div className=\"legend\">\n          <span className=\"label\" style={{color: \"red\"}}>Against: {proposal.votesAgainst}</span>\n        </div>\n        <div className=\"legend\">\n          <span className=\"label\" style={{color: \"grey\"}}>Total: {totalVotes}</span>\n        </div>\n      </div>\n    </span>\n  );\n}\n\nexport default Proposal;","import React, {useState} from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport '../Styles/Timeline.css'\nimport Proposal from './Proposal'\n\nexport const DAO_QUERY = gql`\n  query GetProposals($daoAddress: Bytes!) {\n    proposals (\n      where: {\n        dao: $daoAddress,\n      },\n      orderBy: createdAt,\n      orderDirection: desc\n    ) {\n      createdAt\n      title\n      winningOutcome\n      votes {\n        voter\n      }\n      description\n      proposer\n      votesFor\n      votesAgainst\n    }\n  }\n`\n\nconst Timeline: React.FC<{daoAddress: string}> = ({daoAddress}) => {\n  const { loading, error, data } = useQuery(DAO_QUERY, {variables: { daoAddress }})\n\n  if (error) console.log(\"error:\", error)\n\n  return (\n    <div>\n      {\n        loading && <div><br/><br/><br/><br/><br/><h3>Loading...</h3></div>\n      }\n      {\n        !loading && <div className=\"timeline\">\n          { \n            data.proposals.map((proposal: any, i: number) => \n              <Proposal proposal={proposal} key={i} />\n            )\n          }\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default Timeline;","export const daos = [\n  {\n    \"id\": \"0x74504b811bbf357edb6daa8346d51f6dd113113f\",\n    \"name\": \"BetterBrooklyn\"\n  },\n  {\n    \"id\": \"0x84c2276acaf67b65bca212c8634688b5b2dc903e\",\n    \"name\": \"BitFWD blockhathon\"\n  },\n  {\n    \"id\": \"0x33658686cbefe289b55814d0b3f3d45de6c50fd9\",\n    \"name\": \"CementDAO\"\n  },\n  {\n    \"id\": \"0x0b93ba560283350d4216f29dc57e15df38d0eace\",\n    \"name\": \"CuraDAO\"\n  },\n  {\n    \"id\": \"0xbe1a98d3452f6da6e0984589e545d4fc25af7526\",\n    \"name\": \"dOrg\"\n  },\n  {\n    \"id\": \"0x519b70055af55a007110b4ff99b0ea33071c720a\",\n    \"name\": \"dxDAO\"\n  },\n  {\n    \"id\": \"0x3324b516df92e78463d8b0616dd146cf6c58b0b9\",\n    \"name\": \"efxDAO\"\n  },\n  {\n    \"id\": \"0x0c88aa3c4fe9f9f8da766e9b8bfbbaa1235928cc\",\n    \"name\": \"ETHBerlin dHack.io\"\n  },\n  {\n    \"id\": \"0x2b8c70fffda7f3d7667f7cfede1429313886329c\",\n    \"name\": \"ETHGlobal\"\n  },\n  {\n    \"id\": \"0x0ed985925bb42c6719d10dcd1cc02d8cf596c15b\",\n    \"name\": \"ETHIndia dHack\"\n  },\n  {\n    \"id\": \"0x8990e11b69403ea53ef2b32434bbd7dbf84b5234\",\n    \"name\": \"FestDAO\"\n  },\n  {\n    \"id\": \"0x294f999356ed03347c7a23bcbcf8d33fa41dc830\",\n    \"name\": \"Genesis Alpha\"\n  },\n  {\n    \"id\": \"0x02200bfe176e8e5f8dc58103afc8ca42ad863736\",\n    \"name\": \"i4 Art\"\n  },\n  {\n    \"id\": \"0x13ea4b5bbc5563b683473412eb525c520a65ce4e\",\n    \"name\": \" Knicks Fans DAO\"\n  },\n  {\n    \"id\": \"0x6bee9b81e434f7afce72a43a4016719315069539\",\n    \"name\": \"Kyber DAO Exp#2\"\n  },\n  {\n    \"id\": \"0x5c309e9b2134d931b7337abcfbe2a50ff31292f7\",\n    \"name\": \"Liberland DAO\"\n  },\n  {\n    \"id\": \"0xbc3ea6c669c7dbbc21d8d7c3a030f63b189da566\",\n    \"name\": \"LongDAO\"\n  },\n  {\n    \"id\": \"0x0004a4c02f97a2cdab3628ac4b834ce4c14f5cf7\",\n    \"name\": \"Meme\"\n  },\n  {\n    \"id\": \"0x11a96d13789179524104dd1e832bf59c930a9042\",\n    \"name\": \"necDAO\"\n  },\n  {\n    \"id\": \"0x440583455bcd85ab2bd429c015d3aabcae135f0a\",\n    \"name\": \"PolkaDAO\"\n  },\n  {\n    \"id\": \"0x70c36947837b43665ed5ea85c112aa0f72cf9fb3\",\n    \"name\": \"Psychedelic Society DAO\"\n  },\n  {\n    \"id\": \"0x61151f7ef32c920794ed89b2545f1672266d6420\",\n    \"name\": \"The General Store DAO\"\n  },\n  {\n    \"id\": \"0x63df13b12bac071ba31b6599b8d97c82cb96a768\",\n    \"name\": \"The Illuminati\"\n  },\n]","import React, {useState} from 'react';\nimport '../Styles/App.css';\nimport Timeline from './Timeline'\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport {daos} from '../daos'\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  const [daoAddress, setDaoAddress] = useState(\"0xbe1a98d3452f6da6e0984589e545d4fc25af7526\")\n\n  return (\n    <ApolloProvider client={client}>\n       <div className=\"App\">\n         <div className=\"dao-header\">\n           {\"Dao: \"}\n           <select className=\"dao-select\" value={daoAddress} onChange={(e) => setDaoAddress(e.target.value)}>\n            {\n              daos.map((dao: any, i: number) => <option key={i} value={dao.id}>{dao.name}</option>)\n            }\n          </select>\n         </div>\n         <hr />\n         <h2 style={{\n           float: \"left\",\n           marginLeft: \"37%\"\n           }}>Proposal</h2>\n         <h2 style={{\n            float: \"right\",\n            marginRight: \"31%\"\n           }}>Vote Distribution</h2>\n        <Timeline daoAddress={daoAddress} />\n      </div>\n    </ApolloProvider>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}